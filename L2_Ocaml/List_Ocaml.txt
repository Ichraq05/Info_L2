Listes fonctionnalités :

*_____________________Bases_________________________*

:: est l'opérateur de construction de liste. Il est utilisé pour ajouter un élément à une liste existante.
ex : let ma_liste = 1 :: [2; 3; 4] ---> [1; 2; 3; 4]


*________________Pattern Matching___________________*

match x with
| [] -> e1
| h :: t -> e2

x est la valeur.
[] correspond à une liste vide.
h :: t est un motif qui correspond à une liste non vide, où h est la tête de la liste et t est la rest de la liste.
e1 est l'expression à évaluer si le motif [ ] correspond à x.
e2 est l'expression à évaluer si le motif h :: t correspond à x.

*____________________Certaines Commandes_______________________*

- raise : génère une exception.
let head (l : 'a list) : 'a =
  match l with
  | [] -> raise (Invalid_argument "empty list")
  | h :: t -> h

- @ : concatenation/additon de n listes.
# [1; 2; 3]@[4; 4];;
- : int list = [1; 2; 3; 4; 4]

- length : longueur d'une liste.
(length [4; 1; 3]) = 4 + (length [1; 3])
                   = 4 + 3 + (length [3])
                   = 4 + 3 + 1 + (length [ ]) 
                   = 4 + 3 + 1 
                   = 8

- mem : vérifie si l'élément x appartient à la liste.
# (mem 3 [1; 2; 3]);;
- : bool = true
# (mem 3 [1; 2]);;
- : bool = false

- nth : n-ième élément de la liste.
# (nth [1; 2; 3] 0);;
- : int = 1
# (nth [1; 2; 3] 2);;
- : int = 3

- rev : inversion de l'ordre d'une liste.
(rev t) @ [h] --> (rev [1; 2; 3]) = (rev [2; 3]) @ [1] 
                                  = ((rev [3]) @ [2]) @ [1]
                                  = (((rev [ ]) @ [3]) @ [2]) @ [1]
                                  = ([3] @ [2]) @ [1] 
                                  = [3; 2; 1]

- acc : stocker temporairement une liste.

